{"version":3,"sources":["components/Main/Main.tsx","components/Header/Header.styles.tsx","shared/colors/index.ts","components/Header/Header.tsx","components/WrapperContent/WrapperContent.tsx","components/CountryCard/CountryCard.tsx","config/queries/countryInfo/CountryInfo.ts","store/modules/infoCountries/types.ts","store/modules/infoCountries/actions.ts","components/FilterInput/FilterInput.tsx","pages/Home/Home.style.ts","pages/Home/Home.tsx","components/EditInfo/EditInfo.style.ts","components/EditInfo/EditInfo.tsx","pages/Details/Details.style.ts","pages/Details/Details.tsx","config/key.ts","routes.tsx","store/modules/infoCountries/reducer.ts","store/modules/rootReducer.ts","store/index.ts","config/gql/client-gql.ts","App.tsx","index.tsx"],"names":["Main","children","style","height","Header","styled","header","Typography","variant","WrapperContent","useStyles","makeStyles","title","fontSize","media","width","CountryCard","countryInfo","styles","Card","CardMedia","className","image","flag","svgFile","CardContent","nativeName","name","component","capital","CardActions","Button","size","color","to","actions","CountryInfoQuery","gql","FilterInput","onFilter","buttonColor","useState","filterText","setFilterText","changeEvent","useRef","debounce","value","current","TextField","label","onChange","event","target","FilterWrapper","div","dispatchProps","addCountryInfo","type","add","connector","connect","state","infos","InfoReducer","arrayState","data","useQuery","useEffect","Country","map","item","filteredInfos","useMemo","filter","toLowerCase","includes","Grid","container","xs","padding","key","CustomForm","form","editCountryInfo","edit","infosMap","mapState","schema","object","shape","string","required","area","number","population","props","useForm","resolver","yupResolver","defaultValues","errors","register","handleSubmit","inputRef","error","helperText","message","onClick","countryToEdit","closeModal","update","onSubmit","WrapperInfo","WrapperImage","WrapperButtonGroup","WrapperMain","WrapperMap","MarkerIcon","MarkerMain","match","params","setCountryInfo","nearbyCountries","setNearbyCountries","opened","setOpened","get","window","location","href","draft","distanceToOtherCountries","push","countryName","src","alt","Divider","topLevelDomains","distanceInKm","ButtonGroup","mapStyle","accessToken","latitude","longitude","zoom","showCompass","showZoom","position","Modal","display","justifyContent","alignItems","flexDirection","open","onClose","Routes","path","exact","Home","Details","initialState","Map","mapInfo","infoCountries","action","set","Array","from","values","draftMap","delete","combineReducers","store","createStore","rootReducer","client","ApolloClient","uri","cache","InMemoryCache","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAQeA,EANQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACrB,yBAAKC,MAAO,CAAEC,OAAQ,UACnBF,I,iPCDL,IAUeG,EAVAC,IAAOC,OAAV,ICHW,WCaRF,EATA,WACb,OACE,kBAAC,EAAD,KACE,kBAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,yB,gCCCSC,EANkB,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAH,OAC/B,yBAAKC,MAAO,CAAEC,OAAQ,sBACnBF,I,+DCSCS,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IAEZC,MAAO,CACLC,MAAO,OACPZ,OAAQ,OAmCGa,EA/B6B,SAAC,GAEtC,IADLC,EACI,EADJA,YAEMC,EAASR,IAEf,OACE,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWH,EAAOJ,MAClBQ,MAAOL,EAAYM,KAAKC,UAE1B,kBAACC,EAAA,EAAD,KACE,kBAAClB,EAAA,EAAD,CAAYc,UAAWH,EAAON,OAC3BK,EAAYS,WADf,KAC6BT,EAAYU,KADzC,KAGA,kBAACpB,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,QACnCX,EAAYY,UAGjB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,WAEN,kBAAC,IAAD,CAAMC,GAAE,mBAAcjB,EAAYU,OAAlC,gB,osCC5CV,ICDYQ,ED0EGC,EAzEU,WACvB,OAAOC,cAAP,O,SCFUF,K,uBAAAA,E,0BAAAA,M,KCCL,I,kBCkCQG,EAxBsB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAAkB,EAC9BC,mBAAiB,IADa,mBAC3DC,EAD2D,KAC/CC,EAD+C,KAE5DC,EAAcC,iBAClBC,oBAAS,SAACC,GAAoBR,EAASQ,KAAU,MACjDC,QAOF,OACE,kBAACC,EAAA,EAAD,CACEhB,MAAOO,EACPU,MAAM,SACNvB,KAAK,cACLoB,MAAOL,EACPS,SAXiB,SAACC,GACpBT,EAAcS,EAAMC,OAAON,OAC3BH,EAAYQ,EAAMC,OAAON,QAUvBvC,QAAQ,SACRwB,KAAK,W,oLC9BJ,IAAMsB,EAAgBjD,IAAOkD,IAAV,KCgBpBC,EAAgB,CACpBC,eHhB4B,SAACxC,GAAD,MAA+B,CAC3DyC,KAAMvB,EAAQwB,IACd1C,iBG4Da2C,EA3CGC,aAVM,SAACC,GACvB,MAAQ,CACNC,MAAOD,EAAME,YAAYC,cAQcT,EA2C5BI,EAvCwB,SAAC,GAA+B,IAA7BG,EAA4B,EAA5BA,MAAON,EAAqB,EAArBA,eACvCS,EAASC,mBAAmC/B,KAA5C8B,KAD4D,EAEhCzB,mBAAiB,IAFe,mBAE7DC,EAF6D,KAEjDC,EAFiD,KAGpEyB,qBAAU,WACJ,OAAJF,QAAI,IAAJA,KAAMG,QAAQC,KAAI,SAACC,GACjBd,EAAec,QAEhB,CAACL,IAEJ,IAAMM,EAAgBC,mBAAQ,WAM5B,OALiBV,EAAMW,QAAO,SAACH,GAC7B,QAAGA,EAAK5C,KAAKgD,cAAcC,SAASlC,EAAWiC,kBAC5CJ,EAAK7C,WAAWiD,cAAcC,SAASlC,EAAWiC,oBAItD,CAACZ,EAAOrB,IAIX,OACE,kBAAC,EAAD,KACE,kBAACY,EAAD,KACE,kBAAC,EAAD,CACEf,SAAU,SAACQ,GAAD,OAAmBJ,EAAcI,IAC3CP,YAAY,aAGhB,kBAACqC,EAAA,EAAD,CAAMC,WAAS,GACZN,EAAcF,KAAI,SAACC,GAAD,OACjB,kBAACM,EAAA,EAAD,CAAMN,MAAI,EAACQ,GAAI,EAAG7E,MAAO,CAAE8E,QAAS,OAASC,IAAKV,EAAK5C,MACrD,kBAAC,EAAD,CAAaV,YAAasD,a,6RCvD/B,IAAMW,EAAa7E,IAAO8E,KAAV,KCcjB3B,EAAgB,CACpB4B,gBLT6B,SAACH,EAAahE,GAAd,MAA4C,CACzEyC,KAAMvB,EAAQkD,KACdJ,MACAhE,iBKSI2C,EAAYC,aAVM,SAACC,GACvB,MAAQ,CACNwB,SAAUxB,EAAME,YAAYuB,YAQW/B,GAUrCgC,EAASC,cAASC,MAAM,CAC5BhE,WAAYiE,cAASC,WACrB/D,QAAS8D,cAASC,WAClBC,KAAMC,cAASF,WACfG,WAAYD,cAASF,aAoERhC,KAjEmB,SAACoC,GAAW,IAAD,UACAC,kBAAQ,CACjDC,SAAUC,sBAAYX,GACtBY,cAAe,CACb1E,WAAYsE,EAAM/E,YAAYS,WAC9BG,QAASmE,EAAM/E,YAAYY,QAC3BgE,KAAMG,EAAM/E,YAAY4E,KACxBE,WAAYC,EAAM/E,YAAY8E,cAN1BM,EADmC,EACnCA,OAAQC,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,aAoB1B,OACE,kBAACrB,EAAD,KACE,kBAACjC,EAAA,EAAD,CACEC,MAAM,cACNvB,KAAK,aACL6E,SAAUF,EACVG,QAASJ,EAAO3E,WAChBgF,WAAU,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAQ3E,kBAAV,aAAE,EAAoBiF,UAElC,kBAAC1D,EAAA,EAAD,CACEC,MAAM,UACNvB,KAAK,UACL6E,SAAUF,EACVG,QAASJ,EAAO3E,WAChBgF,WAAU,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAQ3E,kBAAV,aAAE,EAAoBiF,UAElC,kBAAC1D,EAAA,EAAD,CACEC,MAAM,UACNvB,KAAK,OACL+B,KAAK,SACL8C,SAAUF,EACVG,QAASJ,EAAOR,KAChBa,WAAU,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAQR,YAAV,aAAE,EAAcc,UAE5B,kBAAC1D,EAAA,EAAD,CACEC,MAAM,kBACNvB,KAAK,aACL+B,KAAK,SACL8C,SAAUF,EACVG,QAASJ,EAAON,WAChBW,WAAU,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAQN,kBAAV,aAAE,EAAoBY,UAElC,kBAAC5E,EAAA,EAAD,CACE2B,KAAK,SACLkD,QAASL,GAAa,SAACrC,GAAD,OA5CX,SAACA,GAChB,IAAM2C,EAAa,2BACdb,EAAM/E,aACNiD,GAEL8B,EAAMZ,gBAAgBY,EAAM/E,YAAYU,KAAMkF,GAC9Cb,EAAMc,YAAW,GACjBd,EAAMe,OAAOF,GAqC4BG,CAAS9C,MAC9CjC,MAAM,UACNzB,QAAQ,aAJV,c,2yCCxFC,IAAMyG,GAAc5G,IAAOkD,IAAV,MAQX2D,GAAe7G,IAAOkD,IAAV,MAUZ4D,GAAqB9G,IAAOkD,IAAV,MASlB6D,GAAc/G,IAAOkD,IAAV,MAgBX8D,GAAahH,IAAOkD,IAAV,MAKV+D,GAAajH,IAAOkD,IAAV,KASVgE,GAAalH,IAAOkD,IAAV,K,SCuHRK,I,OAxJGC,aATM,SAACC,GACvB,MAAQ,CACNwB,SAAUxB,EAAME,YAAYuB,YAIV,GA2JP3B,EA5IkB,SAAC,GAA8C,IAAzBjC,EAAwB,EAA3C6F,MAASC,OAAU9F,KAAS2D,EAAe,EAAfA,SAAe,EACvC7C,qBADuC,mBACtExB,EADsE,KACzDyG,EADyD,OAE/BjF,mBAAyB,IAFM,mBAEtEkF,EAFsE,KAErDC,EAFqD,OAGjDnF,oBAAkB,GAH+B,mBAGtEoF,EAHsE,KAG9DC,EAH8D,KAqB7E,OAhBA1D,qBAAU,WACLkB,EAASyC,IAAIpG,GACd+F,EAAepC,EAASyC,IAAIpG,IAE5BqG,OAAOC,SAASC,KAAO,MAExB,CAACvG,IAEJyC,qBAAU,WACR,IAAM+D,EAAmB,GACd,OAAXlH,QAAW,IAAXA,KAAamH,yBAAyB9D,KAAI,SAACC,GACzC4D,EAAME,KAAK/C,EAASyC,IAAIxD,EAAK+D,iBAE/BV,EAAmBO,KAClB,CAAClH,IAEDA,EAEC,kBAAC,EAAD,KACE,kBAAC4D,EAAA,EAAD,CAAMC,WAAS,EAAC5E,MAAO,CAAEC,OAAQ,SAC/B,kBAAC8G,GAAD,KACE,kBAACC,GAAD,KACE,yBAAKqB,IAAKtH,EAAYM,KAAKC,QAASgH,IAAG,mBAAcvH,EAAYU,QACjE,kBAACpB,EAAA,EAAD,CAAYC,QAAQ,MACjBS,EAAYU,OAGjB,kBAACyF,GAAD,KACE,kBAAC7G,EAAA,EAAD,CAAYC,QAAQ,aACjBS,EAAYS,YAGf,kBAAC+G,EAAA,EAAD,MAEA,6BACE,kBAAClI,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,KAAtC,YACW,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,QAAQX,EAAYY,UAGrE,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,KAAtC,YACQ,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,QAAQX,EAAY4E,OAGlE,kBAACtF,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,KAAtC,oBACa,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,QAAQX,EAAY8E,aAGvE,kBAACxF,EAAA,EAAD,CAAYC,QAAQ,QAAQoB,UAAU,KAAtC,2BAC0B,4BAEtBX,EAAYyH,gBAAgBpE,KAAI,SAAAC,GAC9B,OACE,wBAAIU,IAAKhE,EAAYU,MAAO4C,EAAK5C,WAMzC,kBAAC8G,EAAA,EAAD,MACA,kBAAClI,EAAA,EAAD,gCACA,4BACGU,EAAYmH,yBAAyB9D,KAAI,SAACC,GAAD,OACxC,wBAAIU,IAAKV,EAAK+D,aACZ,kBAAC/H,EAAA,EAAD,CAAYqB,UAAU,QAAQ2C,EAAK+D,YAAnC,MAAmD/D,EAAKoE,aAAxD,WAIN,kBAACxB,GAAD,KACE,kBAACyB,EAAA,EAAD,CACEpI,QAAQ,YACRyB,MAAM,WAEN,kBAACF,EAAA,EAAD,CACE6E,QAAS,kBAAMkB,GAAU,KAD3B,UAKA,kBAAC/F,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMG,GAAG,KAAT,eAMV,kBAACmF,GAAD,KACI,kBAAC,KAAD,CACEnH,MAAO,CAAEa,MAAO,OAAQZ,OAAQ,UAChC0I,SAAS,kCACTC,YCnIN,2FDoIMC,SAAU9H,EAAYgH,SAASc,SAC/BC,UAAW/H,EAAYgH,SAASe,UAChCC,KAAM,GAEJ,kBAAC,KAAD,CACEF,SAAU9H,EAAYgH,SAASc,SAC/BC,UAAW/H,EAAYgH,SAASe,WAEhC,kBAACzB,GAAD,KAAatG,EAAYU,OAE5BgG,EAAgBrD,KAAI,SAACC,GAAD,OACnB,kBAAC,KAAD,CACEU,IAAKV,EAAK5C,KACVqH,UAAWzE,EAAK0D,SAASe,UACzBD,SAAUxE,EAAK0D,SAASc,UAExB,kBAACzB,GAAD,KAAa/C,EAAK5C,UAGtB,kBAAC,KAAD,CAAmBuH,aAAW,EAACC,UAAQ,EAACC,SAAS,kBAK3D,kBAACC,EAAA,EAAD,CACEnJ,MAAO,CACLoJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAEjBC,KAAM7B,EACN8B,QAAS,kBAAM7B,GAAU,KAEzB,kBAAC,EAAD,CACE7G,YAAaA,EACb6F,WAAYgB,EACZf,OAAQW,MAMX,0DE7JMkC,GAZA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAClI,UAAWmI,IACjC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,OAAK,GAC1B,kBAAC,IAAD,CAAU5H,GAAG,MAEf,kBAAC,IAAD,CAAO2H,KAAK,iBAAiBjI,UAAWoI,Q,SCVxCC,GAA0B,CAC9B1E,SAAU,IAAI2E,IACdjG,WAAY,IAGRkG,GAAgC,IAAID,IA+B3BE,GA7BO,WAAsD,IAArDtG,EAAoD,uDAAjCmG,GAAcI,EAAmB,uCACzE,OAAOA,EAAO3G,MACZ,KAAKvB,EAAQwB,IACNwG,GAAQpC,IAAIsC,EAAOpJ,YAAYU,OAAOwI,GAAQG,IAAID,EAAOpJ,YAAYU,KAAM0I,EAAOpJ,aACvF,IAAMkH,EAAmB,CACvBlE,WAAYsG,MAAMC,KAAKL,GAAQM,UAC/BlF,SAAU4E,IAGZ,OADArG,EAAQqE,EAGV,KAAKhG,EAAQkD,KACX,IAAIqF,EAAWP,GAAQpC,IAAIsC,EAAOpF,KAWlC,OAVAkF,GAAQQ,OAAON,EAAOpF,KACtByF,EAAQ,2BACHA,GACAL,EAAOpJ,aAEZkJ,GAAQG,IAAII,EAAS/I,KAAM+I,GAC3B5G,EAAQ,CACNyB,SAAU4E,GACVlG,WAAYsG,MAAMC,KAAKL,GAAQM,WAInC,QAAS,OAAO3G,IChCL8G,gBAAgB,CAC7B5G,iBCCa6G,GAFDC,aAAYC,ICIXC,I,OALA,IAAIC,eAAa,CAC9BC,IAAK,6CACLC,MAAO,IAAIC,mBCoBEC,GAbH,WACV,OACE,kBAAC,iBAAD,CAAgBL,OAAQA,IACtB,kBAAC,IAAD,CAAUH,MAAOA,IACf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,UCbVS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a2c9d1ab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Main: React.FC = ({ children }) => (\r\n  <div style={{ height: '100vh' }}>\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default Main\r\n","import styled from 'styled-components'\r\nimport { primary } from 'shared/colors'\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 64px;\r\n  background-color: ${primary};\r\n  color: #fff;\r\n`\r\n\r\nexport default Header\r\n","export const primary = \"#3f51b5\"","import React from 'react'\r\nimport { Typography, AppBar } from '@material-ui/core'\r\nimport HeaderComponent from './Header.styles'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderComponent>\r\n      <Typography variant=\"h6\">Lista dos Países</Typography>\r\n    </HeaderComponent>\r\n    \r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst WrapperContent: React.FC = ({ children }) => (\r\n  <div style={{ height: 'calc(100% - 64px)' }}>\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default WrapperContent\r\n","import React from 'react'\r\nimport { Card, CardActions, CardContent, Typography, CardMedia, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Link } from 'react-router-dom'\r\nimport CountryInfo from 'shared/types/Country'\r\n\r\ntype CountryProps = {\r\n  countryInfo: CountryInfo\r\n}\r\n\r\n/**\r\n * Utilizo makeStyles apenas para mostrar que também há essa forma para o Material-UI de estilizar os componentes ao invés de styled-components ou .css\r\n */\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontSize: 18\r\n  },\r\n  media: {\r\n    width: '100%',\r\n    height: 192\r\n  }\r\n})\r\n\r\nconst CountryCard: React.FC<CountryProps> = ({\r\n  countryInfo\r\n}) => {\r\n  const styles = useStyles()\r\n\r\n  return (\r\n    <Card>\r\n      <CardMedia\r\n        className={styles.media}\r\n        image={countryInfo.flag.svgFile}\r\n      />\r\n      <CardContent>\r\n        <Typography className={styles.title}>\r\n          {countryInfo.nativeName} ({countryInfo.name})\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"span\">\r\n          {countryInfo.capital}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n        >\r\n          <Link to={`/details/${countryInfo.name}`}>Detalhes</Link>\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CountryCard\r\n","import { gql } from '@apollo/client'\r\nimport CountryInfo from 'shared/types/Country'\r\n\r\nconst CountryInfoQuery = () => {\r\n  return gql`\r\n    query {\r\n      Country {\r\n        name\r\n        nativeName\r\n        alpha2Code\r\n        alpha3Code\r\n        area\r\n        population\r\n        populationDensity\r\n        capital\r\n        demonym\r\n        gini\r\n        location {\r\n          latitude\r\n          longitude\r\n        }\r\n        numericCode\r\n        subregion {\r\n          name\r\n          region {\r\n            name\r\n          }\r\n        }\r\n        officialLanguages {\r\n          iso639_1\r\n          iso639_2\r\n          name\r\n          nativeName\r\n        }\r\n        currencies {\r\n          name\r\n          symbol\r\n        }\r\n        regionalBlocs {\r\n          name\r\n          acronym\r\n          otherAcronyms {\r\n            name\r\n          }\r\n          otherNames {\r\n            name\r\n          }\r\n        }\r\n        flag {\r\n          emoji\r\n          emojiUnicode\r\n          svgFile\r\n        }\r\n        topLevelDomains {\r\n          name\r\n        }\r\n        callingCodes {\r\n          name\r\n        }\r\n        alternativeSpellings {\r\n          name\r\n        }\r\n        distanceToOtherCountries(first: 5) {\r\n          distanceInKm\r\n          countryName\r\n        }\r\n      }\r\n    }\r\n\r\n  `\r\n}\r\n\r\nexport interface CountryInfoQueryResponse {\r\n  Country: Array<CountryInfo>\r\n}\r\n\r\nexport default CountryInfoQuery\r\n","import CountryInfo from \"shared/types/Country\"\r\n\r\nexport enum actions {\r\n  add = '@countryInfo/ADD',\r\n  edit = '@countryInfo/EDIT'\r\n}\r\n\r\nexport type action = {\r\n  type: actions,\r\n  countryInfo: CountryInfo,\r\n  key?: string\r\n}\r\n\r\nexport type stateType = {\r\n  mapState: Map<string, CountryInfo>,\r\n  arrayState: CountryInfo[]\r\n}\r\n\r\nexport type infoState = {\r\n  InfoReducer: stateType\r\n}","import CountryInfo from \"shared/types/Country\"\r\nimport { actions } from './types'\r\n\r\nexport const addCountryInfo = (countryInfo: CountryInfo) => ({\r\n  type: actions.add,\r\n  countryInfo\r\n})\r\n\r\nexport const editCountryInfo = (key: string, countryInfo: CountryInfo) => ({\r\n  type: actions.edit,\r\n  key,\r\n  countryInfo\r\n})","import React, {\r\n  useRef,\r\n  ChangeEvent,\r\n  useState\r\n} from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport { debounce } from 'lodash'\r\n\r\ntype Props = {\r\n  onFilter: (value: string) => void,\r\n  buttonColor: 'primary' | 'secondary'\r\n}\r\n\r\nconst FilterInput: React.FC<Props> = ({ onFilter, buttonColor }) => {\r\n  const [filterText, setFilterText] = useState<string>('')\r\n  const changeEvent = useRef(\r\n    debounce((value: string) => { onFilter(value) }, 500)\r\n  ).current\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setFilterText(event.target.value)\r\n    changeEvent(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <TextField\r\n      color={buttonColor}\r\n      label='Filtro'\r\n      name='searchInput'\r\n      value={filterText}\r\n      onChange={handleChange}\r\n      variant=\"filled\"\r\n      size=\"small\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default FilterInput\r\n","import styled from 'styled-components'\r\n\r\nexport const FilterWrapper = styled.div`\r\n  display: flex;\r\n  height: 60px;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  padding: 0 15px;\r\n`","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport Wrapper from 'components/WrapperContent'\r\nimport { Grid } from '@material-ui/core'\r\nimport CountryCard from 'components/CountryCard'\r\nimport CountryInfo from 'shared/types/Country'\r\nimport { useQuery } from '@apollo/client'\r\nimport CountryInfoQuery, { CountryInfoQueryResponse } from 'config/queries/countryInfo'\r\nimport { infoState, addCountryInfo } from 'store/modules/infoCountries'\r\nimport FilterInput from 'components/FilterInput'\r\nimport { FilterWrapper } from './Home.style'\r\n\r\nconst mapStateToProps = (state: infoState) => {\r\n  return ({\r\n    infos: state.InfoReducer.arrayState\r\n  })\r\n}\r\n\r\nconst dispatchProps = {\r\n  addCountryInfo\r\n}\r\n\r\nconst connector = connect(mapStateToProps, dispatchProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nconst Home: React.FC<PropsFromRedux> = ({ infos, addCountryInfo }) => {\r\n  const { data } = useQuery<CountryInfoQueryResponse>(CountryInfoQuery())\r\n  const [filterText, setFilterText] = useState<string>('')\r\n  useEffect(() => {\r\n    data?.Country.map((item: CountryInfo) => {\r\n      addCountryInfo(item)\r\n    })\r\n  }, [data])\r\n\r\n  const filteredInfos = useMemo(() => {\r\n    const filtered = infos.filter((item: CountryInfo) => {\r\n      if(item.name.toLowerCase().includes(filterText.toLowerCase())) return true\r\n      if(item.nativeName.toLowerCase().includes(filterText.toLowerCase())) return true\r\n      return false\r\n    })\r\n    return filtered\r\n  }, [infos, filterText])\r\n\r\n  const handleClear = () => !filterText && setFilterText('')\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FilterWrapper>\r\n        <FilterInput\r\n          onFilter={(value: string) => setFilterText(value)}\r\n          buttonColor=\"primary\"\r\n        />\r\n      </FilterWrapper>\r\n      <Grid container>\r\n        {filteredInfos.map((item: CountryInfo) => (\r\n          <Grid item xs={3} style={{ padding: '8px' }} key={item.name}>\r\n            <CountryCard countryInfo={item} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default connector(Home)\r\n","import styled from 'styled-components'\r\n\r\nexport const CustomForm = styled.form`\r\n  background-color: white;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  button {\r\n    margin-top: 16px;\r\n  }\r\n` ","import React from 'react'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { infoState, editCountryInfo } from 'store/modules/infoCountries'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { object, string, number } from 'yup'\r\nimport { CustomForm } from './EditInfo.style'\r\nimport Country from 'shared/types/Country'\r\n\r\nconst mapStateToProps = (state: infoState) => {\r\n  return ({\r\n    infosMap: state.InfoReducer.mapState\r\n  })\r\n}\r\n\r\nconst dispatchProps = {\r\n  editCountryInfo\r\n}\r\n\r\nconst connector = connect(mapStateToProps, dispatchProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n  countryInfo: Country,\r\n  closeModal: (value: boolean) => void,\r\n  update: (value: Country) => void\r\n}\r\n\r\nconst schema = object().shape({\r\n  nativeName: string().required(),\r\n  capital: string().required(),\r\n  area: number().required(),\r\n  population: number().required()\r\n})\r\n\r\nconst EditInfo: React.FC<Props> = (props) => {\r\n  const { errors, register, handleSubmit } = useForm({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: {\r\n      nativeName: props.countryInfo.nativeName,\r\n      capital: props.countryInfo.capital,\r\n      area: props.countryInfo.area,\r\n      population: props.countryInfo.population\r\n    }\r\n  })\r\n\r\n  const onSubmit = (data: any) => {\r\n    const countryToEdit = {\r\n      ...props.countryInfo,\r\n      ...data\r\n    }\r\n    props.editCountryInfo(props.countryInfo.name, countryToEdit)\r\n    props.closeModal(true)\r\n    props.update(countryToEdit)\r\n  }\r\n\r\n  return (\r\n    <CustomForm>\r\n      <TextField\r\n        label=\"Nome Nativo\"\r\n        name=\"nativeName\"\r\n        inputRef={register}\r\n        error={!!errors.nativeName}\r\n        helperText={errors?.nativeName?.message}\r\n      />\r\n      <TextField\r\n        label=\"Capital\"\r\n        name=\"capital\"\r\n        inputRef={register}\r\n        error={!!errors.nativeName}\r\n        helperText={errors?.nativeName?.message}\r\n      />\r\n      <TextField\r\n        label=\"Área\"\r\n        name=\"area\"\r\n        type=\"number\"\r\n        inputRef={register}\r\n        error={!!errors.area}\r\n        helperText={errors?.area?.message}\r\n      />\r\n      <TextField\r\n        label=\"População\"\r\n        name=\"population\"\r\n        type=\"number\"\r\n        inputRef={register}\r\n        error={!!errors.population}\r\n        helperText={errors?.population?.message}\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={handleSubmit((data: any) => onSubmit(data))}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n      >\r\n        Salvar\r\n      </Button>\r\n    </CustomForm>\r\n  )\r\n}\r\n\r\nexport default connector(EditInfo)\r\n","import styled from 'styled-components'\r\n\r\nexport const WrapperInfo = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const WrapperImage = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 300px;\r\n  img {\r\n    width: 64px;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nexport const WrapperButtonGroup = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  button, a {\r\n    color: white;\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport const WrapperMain = styled.div`\r\n  width: 300px;\r\n  p {\r\n    color: gray;\r\n    > span {\r\n      color: black;\r\n    }\r\n    > ul {\r\n      display: flex;\r\n      flex-direction: column;\r\n      color: black;\r\n      align-items: center;\r\n    }\r\n  }\r\n`\r\n\r\nexport const WrapperMap = styled.div`\r\n  width: 100vw;\r\n  margin: 8px;\r\n`\r\n\r\nexport const MarkerIcon = styled.div`\r\n  padding: 5px;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    background: #1978c8;\r\n    border-radius: 6px;\r\n    font-size: 10px;\r\n`\r\n\r\nexport const MarkerMain = styled.div`\r\n  padding: 10px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  background: #eb4034;\r\n  border-radius: 6px;\r\n`\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Divider, Grid, Typography, Modal, Button, ButtonGroup } from '@material-ui/core'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { infoState } from 'store/modules/infoCountries'\r\nimport WrapperContent from 'components/WrapperContent'\r\nimport EditInfo from 'components/EditInfo'\r\nimport Country from 'shared/types/Country'\r\nimport {\r\n  WrapperInfo, WrapperImage,\r\n  WrapperMain, WrapperButtonGroup,\r\n  WrapperMap, MarkerIcon, MarkerMain\r\n} from './Details.style'\r\nimport { Link } from 'react-router-dom'\r\nimport MapGL, { Marker, NavigationControl  } from '@urbica/react-map-gl'\r\nimport key from 'config/key'\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst mapStateToProps = (state: infoState) => {\r\n  return ({\r\n    infosMap: state.InfoReducer.mapState\r\n  })\r\n}\r\n\r\nconst dispatchProps = {\r\n}\r\n\r\nconst connector = connect(mapStateToProps, dispatchProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n  match: {\r\n    params: {\r\n      name: string\r\n    }\r\n  }\r\n}\r\n\r\nconst Details: React.FC<Props> = ({ match: { params: { name }}, infosMap }) => {\r\n  const [countryInfo, setCountryInfo] = useState<Country>()\r\n  const [nearbyCountries, setNearbyCountries] = useState<Array<Country>>([])\r\n  const [opened, setOpened] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    if(infosMap.get(name)) {\r\n      setCountryInfo(infosMap.get(name))\r\n    } else {\r\n      window.location.href = '/'\r\n    }\r\n  }, [name])\r\n\r\n  useEffect(() => {\r\n    const draft: Country[] = []\r\n    countryInfo?.distanceToOtherCountries.map((item: any) => {\r\n      draft.push(infosMap.get(item.countryName)!)\r\n    })\r\n    setNearbyCountries(draft)\r\n  }, [countryInfo])\r\n\r\n  if(countryInfo) {\r\n    return (\r\n      <WrapperContent>\r\n        <Grid container style={{ height: '100%' }}>\r\n          <WrapperInfo>\r\n            <WrapperImage>\r\n              <img src={countryInfo.flag.svgFile} alt={`Bandeira ${countryInfo.name}`}/>\r\n              <Typography variant=\"h3\">\r\n                {countryInfo.name}\r\n              </Typography>\r\n            </WrapperImage>\r\n            <WrapperMain>\r\n              <Typography variant=\"subtitle1\">\r\n                {countryInfo.nativeName}\r\n              </Typography>\r\n\r\n              <Divider />\r\n\r\n              <div>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Capital: <Typography variant=\"body1\" component=\"span\">{countryInfo.capital}</Typography>\r\n                </Typography>\r\n\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Área: <Typography variant=\"body1\" component=\"span\">{countryInfo.area}</Typography>\r\n                </Typography>\r\n\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  População: <Typography variant=\"body1\" component=\"span\">{countryInfo.population}</Typography>\r\n                </Typography>\r\n\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  TLD (Top-Level Domain): <ul>\r\n                  {\r\n                    countryInfo.topLevelDomains.map(item => {\r\n                      return (\r\n                        <li key={countryInfo.name}>{item.name}</li>\r\n                      )\r\n                    })\r\n                  }\r\n                  </ul>\r\n                </Typography>\r\n                <Divider />\r\n                <Typography>Paises mais próximos</Typography>\r\n                <ol>\r\n                  {countryInfo.distanceToOtherCountries.map((item: any) => (\r\n                    <li key={item.countryName}>\r\n                      <Typography component=\"span\">{item.countryName} - {item.distanceInKm}Km</Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n                <WrapperButtonGroup>\r\n                  <ButtonGroup\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                  >\r\n                    <Button\r\n                      onClick={() => setOpened(true)}\r\n                    >\r\n                      Editar\r\n                    </Button>\r\n                    <Button>\r\n                      <Link to='/'>Voltar</Link>\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </WrapperButtonGroup>\r\n              </div>\r\n            </WrapperMain>\r\n            <WrapperMap>\r\n                <MapGL\r\n                  style={{ width: '100%', height: '1200px' }}\r\n                  mapStyle='mapbox://styles/mapbox/light-v9'\r\n                  accessToken={key}\r\n                  latitude={countryInfo.location.latitude}\r\n                  longitude={countryInfo.location.longitude}\r\n                  zoom={0}\r\n                >\r\n                    <Marker\r\n                      latitude={countryInfo.location.latitude}\r\n                      longitude={countryInfo.location.longitude}\r\n                    >\r\n                      <MarkerMain>{countryInfo.name}</MarkerMain>\r\n                    </Marker>\r\n                  {nearbyCountries.map((item: Country) => (\r\n                    <Marker\r\n                      key={item.name}\r\n                      longitude={item.location.longitude}\r\n                      latitude={item.location.latitude}\r\n                    >\r\n                      <MarkerIcon>{item.name}</MarkerIcon>\r\n                    </Marker>\r\n                  ))}\r\n                  <NavigationControl showCompass showZoom position='top-right' />\r\n                </MapGL>\r\n            </WrapperMap>\r\n          </WrapperInfo>\r\n        </Grid>\r\n        <Modal\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            flexDirection: 'column'\r\n          }}\r\n          open={opened}\r\n          onClose={() => setOpened(false)}\r\n        >\r\n          <EditInfo\r\n            countryInfo={countryInfo}\r\n            closeModal={setOpened}\r\n            update={setCountryInfo}\r\n          />\r\n        </Modal>\r\n      </WrapperContent>\r\n    )\r\n  }\r\n  return <h1>Não há registros</h1>\r\n}\r\n\r\nexport default connector(Details)\r\n","const key = 'pk.eyJ1IjoiZ2xocm1lIiwiYSI6ImNraTNxY2RtcTNmbTQycnJtZjUwM3FvNGkifQ.1EtP7JP-tY2RCLBEXItiVA'\r\n\r\nexport default key\r\n","import React from 'react'\r\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom'\r\n\r\nimport Home from 'pages/Home'\r\nimport Details from 'pages/Details'\r\n\r\nconst Routes = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path='/' exact component={Home} />\r\n      <Route path='/details' exact>\r\n        <Redirect to='' />\r\n      </Route>\r\n      <Route path='/details/:name' component={Details} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n)\r\n\r\nexport default Routes\r\n","import Country from 'shared/types/Country'\r\nimport { action, actions, stateType } from './types'\r\n\r\nconst initialState: stateType = {\r\n  mapState: new Map(),\r\n  arrayState: []\r\n}\r\n\r\nconst mapInfo: Map<string, Country> = new Map()\r\n\r\nconst infoCountries = (state: stateType = initialState, action: action) => {\r\n  switch(action.type) {\r\n    case actions.add: {\r\n      if (!mapInfo.get(action.countryInfo.name)) mapInfo.set(action.countryInfo.name, action.countryInfo)\r\n      const draft: stateType = {\r\n        arrayState: Array.from(mapInfo.values()),\r\n        mapState: mapInfo\r\n      } \r\n      state = draft\r\n      return state\r\n    }\r\n    case actions.edit: {\r\n      let draftMap = mapInfo.get(action.key!)\r\n      mapInfo.delete(action.key!)\r\n      draftMap = {\r\n        ...draftMap,\r\n        ...action.countryInfo\r\n      }\r\n      mapInfo.set(draftMap.name, draftMap)\r\n      state = {\r\n        mapState: mapInfo,\r\n        arrayState: Array.from(mapInfo.values())\r\n      }\r\n      return state\r\n    }\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default infoCountries\r\n","import { combineReducers } from 'redux'\r\nimport InfoReducer from './infoCountries/reducer'\r\n\r\nexport default combineReducers({\r\n  InfoReducer\r\n})","import { createStore } from 'redux'\r\nimport rootReducer from './modules/rootReducer'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store","import { ApolloClient, InMemoryCache } from '@apollo/client'\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://countries-274616.ew.r.appspot.com/',\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nexport default client\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport Main from 'components/Main'\r\nimport Header from 'components/Header'\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport Routes from './routes'\r\nimport store from './store'\r\n\r\nimport './App.css'\r\nimport client from 'config/gql';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Provider store={store}>\r\n        <Main>\r\n          <Header />\r\n          <Routes />\r\n        </Main>\r\n      </Provider>\r\n    </ApolloProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}